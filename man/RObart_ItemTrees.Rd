% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BARModel.R
\name{RObart_ItemTrees}
\alias{RObart_ItemTrees}
\title{BART model for Bayesian Analysis of Rank-Order data with entities' covariates. Separate tree for each item.}
\usage{
RObart_ItemTrees(
  pair.comp.ten,
  X.train = matrix(NA, nrow = dim(pair.comp.ten)[1], ncol = 0),
  X.test = matrix(NA, nrow = 0, ncol = 0),
  n.item = dim(pair.comp.ten)[1],
  n.ranker = dim(pair.comp.ten)[3],
  p.cov = ncol(X.train),
  iter.max = 5000,
  print.opt = 100,
  initial.list = NULL,
  n.trees = 50L,
  n.burn = 0L,
  n.samples = 1L,
  n.thin = 1L,
  n.chains = 1,
  n.threads = 1L,
  printEvery = 100L,
  printCutoffs = 0L,
  rngKind = "default",
  rngNormalKind = "default",
  rngSeed = NA_integer_,
  updateState = TRUE,
  num_lags = 1,
  diff_num_test_rankers = 0,
  keep_zmat = FALSE,
  tree_power = 2,
  tree_base = 0.95,
  sparse = FALSE,
  alpha_a_y = 0.5,
  alpha_b_y = 1,
  alpha_split_prior = TRUE,
  n.burnin = 0,
  topkinit = FALSE,
  np_errors = FALSE,
  alpha_prior = "vh",
  c1 = 2,
  c2 = 2,
  alpha_gridsize = 100L,
  ranker_components = TRUE,
  lambda0 = NA,
  sigest = NA,
  nu0 = 10,
  sigquant = 0.95,
  item_intercepts = FALSE,
  tau2.alpha = 5^2,
  nu.alpha = 3,
  SUR_errors = FALSE
)
}
\arguments{
\item{pair.comp.ten}{An \eqn{N} by \eqn{N} by \eqn{M} pairwise comparison tensor for all \eqn{N} entities and \eqn{M} rankers, where the (\eqn{i},\eqn{j},\eqn{m}) element equals 1 if \eqn{i} is ranked higher than \eqn{j} by ranker \eqn{m}, 0 if \eqn{i} is ranker lower than \eqn{j}, and NA if the relation between \eqn{i} and \eqn{j} is missing. Note that the diagonal elements (\eqn{i},\eqn{i},\eqn{m})'s for all rankers should be set to NA as well.}

\item{iter.max}{Number of iterations for Gibbs sampler.}

\item{print.opt}{Print every print.optnumber of Gibbsa samples.}

\item{initial.list}{List of initial values for the Gibbs sample. If not null, must contain elements named Z.mat and mu.}

\item{n.trees}{(dbarts option) A positive integer giving the number of trees used in the sum-of-trees formulation.}

\item{n.chains}{(dbarts option) A positive integer detailing the number of independent chains for the dbarts sampler to use (more than one chain is unlikely to improve speed because only one sample for each call to dbarts).}

\item{n.threads}{(dbarts option) A positive integer controlling how many threads will be used for various internal calculations, as well as the number of chains. Internal calculations are highly optimized so that single-threaded performance tends to be superior unless the number of observations is very large (>10k), so that it is often not necessary to have the number of threads exceed the number of chains.}

\item{printEvery}{(dbarts option)If verbose is TRUE, every printEvery potential samples (after thinning) will issue a verbal statement. Must be a positive integer.}

\item{printCutoffs}{(dbarts option) A non-negative integer specifying how many of the decision rules for a variable are printed in verbose mode}

\item{rngKind}{(dbarts option) Random number generator kind, as used in set.seed. For type "default", the built-in generator will be used if possible. Otherwise, will attempt to match the built-in generator’s type. Success depends on the number of threads.}

\item{rngNormalKind}{(dbarts option) Random number generator normal kind, as used in set.seed. For type "default", the built-in generator will be used if possible. Otherwise, will attempt to match the built-in generator’s type. Success depends on the number of threads and the rngKind}

\item{rngSeed}{(dbarts option) Random number generator seed, as used in set.seed. If the sampler is running single-threaded or has one chain, the behavior will be as any other sequential algorithm. If the sampler is multithreaded, the seed will be used to create an additional pRNG object, which in turn will be used sequentially seed the threadspecific pRNGs. If equal to NA, the clock will be used to seed pRNGs when applicable.}

\item{updateState}{(dbarts option) Logical setting the default behavior for many sampler methods with regards to the immediate updating of the cached state of the object. A current, cached state is only useful when saving/loading the sampler.}

\item{diff_num_test_rankers}{Equal to 1 if there is a different number of rankers in the test data than in the training data. (assumes no structure to input data)}

\item{keep_zmat}{Boolean. If equal to TRUE output the draws of Zmat for training data and test data}

\item{tree_power}{Tree prior parameter for outcome model.}

\item{tree_base}{Tree prior parameter for outcome model.}

\item{sparse}{If equal to TRUE, use Linero Dirichlet prior on splitting probabilities}

\item{alpha_a_y}{Linero alpha prior parameter for outcome equation splitting probabilities}

\item{alpha_b_y}{Linero alpha prior parameter for outcome equation splitting probabilities}

\item{alpha_split_prior}{If TRUE, set hyperprior for Linero alpha parameter}

\item{n.burnin}{Number of burn-in iterations. Burn-in iterations are NOT removed. This option is just used to determine the number of iterations past which splitting probabilities are sampled when sparse == TRUE.}

\item{X.mat}{An \eqn{N} by \eqn{L} covariate matrix for the \eqn{N} entities with \eqn{L} covariates. If there are ranker-specific covariate values, then the matrix should have N*M rows where M is the number of rankers. The first N rows correspond to ranker 1, the next N rows correspond to ranker 2, and so on.}
}
\value{
A list containing posterior samples of all the missing evaluation scores for all rankers and all the model parameters.
}
\description{
Implement the Bayesian model for rank-order data with ranked entities' covariates information.
}
